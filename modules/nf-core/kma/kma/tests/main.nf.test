nextflow_process {

    name "Test Process KMA_KMA"
    tag "modules"
    tag "modules_nfcore"
    tag "kma"
    tag "kma/index"
    tag "kma/kma"

    script "../main.nf"
    process "KMA_KMA"
    config "./nextflow.config"


    setup {
        run("KMA_INDEX") {
            script "../../index/main.nf"

            params {
                module_args = '-Sparse'
            }

            process {
                """
                input[0] = [
                    [ id: 'MT192765.1', single_end:false ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }
    }


    test("sarscov2 - fasta - sparse") {

        when {

            params{
                module_args = '-Sparse'
            }

            process {
                """
                input[0] = [
                        [ id:'nfcore_testsample', single_end:false ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                        ]
                    ]
                input[1] = KMA_INDEX.out.index
                input[2] = false
                input[3] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}

/*
    test("sarscov2 - fasta - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'MT192765.1', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
*/
